{-# OPTIONS --postfix-projections #-}
{-# OPTIONS --rewriting #-}

module StrictlyPos where

open import Library

subst-trans : โ {A : Set}{P : A โ Set} {x y z : A} โ
                (p : x โก y) โ (q : y โก z) โ (xs : P x) โ
                  subst P (trans p q) xs โก subst P q (subst P p xs)
subst-trans refl refl xs = refl

-- _S_trictly _P_ositive functors have a well-behaved support

Set^_ : (I : Set) โ Setโ
Set^ I = I โ Set

_โฬ_ : {I : Set} (A B : I โ Set) โ Set
A โฬ B = โ{i} (u : A i) โ B i

record SPos (I : Set) : Setโ where
  field
    F    : (ฯ : I โ Set) โ Set
    mon  : โ{ฯ ฯ'} (ฯโฯ' : ฯ โฬ ฯ') (x : F ฯ) โ F ฯ'

    Supp : โ{ฯ} (x : F ฯ) (i : I) โ Set

    mon-Supp : โ{ฯ ฯ'} (ฯโฯ' : ฯ โฬ ฯ') (x : F ฯ) โ Supp (mon ฯโฯ' x) โฬ Supp x

    necc : โ{ฯ} (x : F ฯ) โ Supp x โฬ ฯ
    suff : โ{ฯ} (x : F ฯ) โ F (Supp x)


{-
    -- laws
    mon-โ : โ {x y z} {g : y โ z} {f : x โ y} โ
            โ xs โ mon g (mon f xs) โก mon (g โ f) xs


    mon-Supp-โ : โ {x y z} {g : y โ z} {f : x โ y} โ
                 โ xs โ (p : Supp (mon g (mon f xs)))
                 โ mon-Supp f xs (mon-Supp g (mon f xs) p)
                 โก mon-Supp (g โ f) xs (subst Supp (mon-โ xs) p)


    necc-nat : โ{ฯ ฯ' : Set} โ (f : ฯ โ ฯ') โ โ (xs : F ฯ) (p : Supp (mon f xs))
               โ necc (mon f xs) p โก f (necc xs (mon-Supp f xs p))

    suff-nat : โ{ฯ ฯ'} โ (f : ฯ โ ฯ') โ โ (xs : F ฯ)
               โ mon (mon-Supp f xs) (suff (mon f xs)) โก suff xs


    necc-suff : โ {ฯ} {x : F ฯ} โ  mon (necc x) (suff x) โก x

    suff-necc : โ {ฯ} {x : F ฯ} (p : Supp _)
                โ necc (suff x) (mon-Supp (necc x) (suff x) p)
                โก subst Supp necc-suff p
-}
open SPos

-- Constructions on SPos

SP = SPos โ Fin

-- Variable

ฮด : โ{n} (i j : Fin n) โ Set
ฮด i j = True (i โ j)

ฮด-diag : โ{n} (i : Fin n) โ ฮด i i โก โค
ฮด-diag zero = refl
ฮด-diag (suc i) with i โ i
ฮด-diag (suc i) | yes p = refl
ฮด-diag (suc i) | no ยฌp = case ยฌp refl of ฮป()

-- {-# REWRITE ฮด-diag #-}  -- illegal

open module DecFinRefl {n} = DecRefl {A = Fin n} _โ_
{-# REWRITE โ-refl #-}

-- Type variables (projections)

-- Var could be generalized to decidable I

Var : โ{n} (i : Fin n) โ SP n
Var i .F ฯ = ฯ i
Var i .mon ฯโฯ' x = ฯโฯ' x
Var i .Supp _ j = ฮด i j
Var i .mon-Supp ฯโฯ' _ {j} u with i โ j
Var i .mon-Supp ฯโฯ' _ {j} _  | yes _ = _
Var i .mon-Supp ฯโฯ' _ {j} () | no _
Var i .necc x {j} u with i โ j
Var i .necc x {.i} _ | yes refl = x
Var i .necc x {j} () | no _
Var i .suff = _ -- rewrite ฮด-diag i = _

-- Constant types have empty support

Const : โ (A : Set) {I} โ SPos I
Const A .F _ = A
Const A .mon _ = id
Const A .Supp _ _ = โฅ
Const A .mon-Supp _ _ ()
Const A .necc _ ()
Const A .suff = id

Empty = Const โฅ
Unit  = Const โค

-- Empty : โ{I} โ SPos I
-- Empty .F _ = โฅ
-- Empty .mon _ ()
-- Empty .Supp ()
-- Empty .mon-Supp _ ()
-- Empty .necc ()
-- Empty .suff ()

-- Unit : โ{I} โ SPos I
-- Unit .F _ = โค
-- Unit .mon = _
-- Unit .Supp _ _ = โฅ
-- Unit .mon-Supp ฯโฯ' _ ()
-- Unit .necc _ ()
-- Unit .suff = _

Fun : โ (A : Set) {I} (B : SPos I) โ SPos I
Fun A B .F ฯ                     = A โ B .F ฯ
Fun A B .mon ฯโฯ' f a            = B .mon ฯโฯ' (f a)
Fun A B .Supp f i                = โ ฮป (a : A) โ B .Supp (f a) i
Fun A B .mon-Supp ฯโฯ' f (a , u) = a , B .mon-Supp ฯโฯ' (f a) u
Fun A B .necc f (a , u)          = B .necc (f a) u
Fun A B .suff f a                = B .mon (a ,_) (B .suff (f a))

Prod : โ{I} (A B : SPos I) โ SPos I
Prod A B .F ฯ                            = A .F ฯ ร B .F ฯ
Prod A B .mon ฯโฯ' (a , b)               = A .mon ฯโฯ' a , B .mon ฯโฯ' b
Prod A B .Supp (a , b) i                 = A .Supp a i โ B .Supp b i
Prod A B .mon-Supp ฯโฯ' (a , b) (injโ u) = injโ (A .mon-Supp ฯโฯ' a u)
Prod A B .mon-Supp ฯโฯ' (a , b) (injโ u) = injโ (B .mon-Supp ฯโฯ' b u)
Prod A B .necc (a , b) (injโ u)          = A .necc a u
Prod A B .necc (a , b) (injโ u)          = B .necc b u
Prod A B .suff (a , b)                   = A .mon injโ (A .suff a) , B .mon injโ (B .suff b)

Sum : โ{I} (A B : SPos I) โ SPos I
Sum A B .F ฯ                      = A .F ฯ โ B .F ฯ
Sum A B .mon ฯโฯ' (injโ a)        = injโ (A .mon ฯโฯ' a)
Sum A B .mon ฯโฯ' (injโ b)        = injโ (B .mon ฯโฯ' b)
Sum A B .Supp (injโ a) i          = A .Supp a i
Sum A B .Supp (injโ b) i          = B .Supp b i
Sum A B .mon-Supp ฯโฯ' (injโ a) u = A .mon-Supp ฯโฯ' a u
Sum A B .mon-Supp ฯโฯ' (injโ b) u = B .mon-Supp ฯโฯ' b u
Sum A B .necc (injโ a) u          = A .necc a u
Sum A B .necc (injโ b) u          = B .necc b u
Sum A B .suff (injโ a)            = injโ (A .suff a)
Sum A B .suff (injโ b)            = injโ (B .suff b)

ext : โ{โ} {A : Set โ} {n} (ฯ : Fin n โ A) (x : A) (i : Fin (suc n)) โ A
ext ฯ x zero = x
ext ฯ x (suc i) = ฯ i

ext-โค-mon : โ{n}{ฯ ฯ' : Fin n โ Set} (ฯโฯ' : ฯ โฬ ฯ') โ ext ฯ โค โฬ ext ฯ' โค
ext-โค-mon ฯโฯ' {zero} = _
ext-โค-mon ฯโฯ' {suc i} = ฯโฯ'

Mu : โ{n} (A : SP (suc n)) โ SP n
Mu A .F ฯ  = ๐ (A .F (ext ฯ โค)) ฮป x โ A .Supp x zero
Mu A .mon {ฯ}{ฯ'} ฯโฯ' = ๐-map (A .mon ฯโคโฯ'โค) ฮป x โ A .mon-Supp (ฮป{i} โ ext-โค-mon ฯโฯ' {i}) x
  where
  ฯโคโฯ'โค : ext ฯ โค โฬ ext ฯ' โค
  ฯโคโฯ'โค {i} = ext-โค-mon ฯโฯ' {i}
Mu A .Supp w i = EF๐ (ฮป x โ A .Supp x (suc i)) w
Mu A .mon-Supp ฯโฯ' x u = {!!}
Mu A .necc (sup x f) (here p)    = A .necc x p
Mu A .necc (sup x f) (there i u) = Mu A .necc (f i) u
Mu A .suff (sup x f) = sup {!!} {!!}

{-
-- containers
record Cont : Setโ where
  constructor _,_
  field
    S : Set
    P : S โ Set

open Cont

โฆ_โง : Cont โ Set โ Set
โฆ S , P โง X = ฮฃ S ฮป s โ P s โ X

-- Every container is strictly positive
tosp : Cont โ SPos
tosp C .F = โฆ C โง
tosp C .mon f (s , t) = s , ฮป p โ f (t p)
tosp C .Supp (s , t) = C .P s
tosp C .mon-Supp f (s , t) p = p
tosp C .necc (s , t) p = t p
tosp C .suff (s , t) = s , ฮป x โ x
{-
tosp C .necc-suff = refl
tosp C .suff-necc p = refl
tosp C .suff-nat f xs = refl
tosp C .necc-nat f xs p = refl
tosp C .mon-โ xs = refl
tosp C .mon-Supp-โ = ฮป xs p โ refl
-}

-- A stricly positive functor is isomorphic to a container
module M  (sp : SPos) where

  cont : Cont
  cont = sp .F โค , sp .Supp

  G = โฆ cont โง

  fwd : โ {X} โ sp .F X โ G X
  fwd fx = sp .mon _ fx  , ฮป p โ sp .necc fx (sp .mon-Supp _ fx p)

  bwd : โ {X} โ G X โ sp .F X
  bwd (s , t) = sp .mon t (sp .suff s)

{-
  iso1 : โ {X} (xs : sp .F X) โ bwd (fwd xs) โก xs
  iso1 xs = trans
            (trans (sym (sp .mon-โ (sp .suff (sp .mon _ xs))))
                   (cong (sp .mon (sp .necc xs)) (sp .suff-nat _ xs)))
                   (sp .necc-suff)

  iso2โ : โ {X} (xs : G X) โ (fwd (bwd xs)) .projโ โก xs .projโ
  iso2โ (s , t) = trans (sp .mon-โ (sp .suff s)) (sp .necc-suff)


  iso2โ : โ {X} (xs : G X) {p : _} โ
            (fwd (bwd xs)) .projโ p โก xs .projโ (subst (sp .Supp) (iso2โ xs) p)
  iso2โ (s , t) {p} = trans (sp .necc-nat  t (sp .suff s) _)
                  (cong t (trans
                          (cong (sp .necc (sp .suff s)) (sp .mon-Supp-โ (sp .suff s) _))
                                (trans (sp .suff-necc _)
                                       (sym (subst-trans ((sp .mon-โ (sp .suff s)))
                                                         (sp .necc-suff) p) ))))
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
